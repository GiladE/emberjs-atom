{
  "route":{
    "this":[
      {"name":"get","snippet":"get('${1:propertyName}')","description":"Get property ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"get","type":"property"},
      {"name":"getProperties","snippet":"getProperties('${1:propertyName}', '$${2:propertyName}')","description":"Get multiple properties ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"getProperties","type":"property"},
      {"name":"replaceWith","snippet":"replaceWith('${1:routePath}')","description":"Replace route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"replaceWith","type":"property"},
      {"name":"transitionTo","snippet":"transitionTo('${1:routePath}')","description":"Transition to route ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"transitionTo","type":"property"},
      {"name":"controllerFor","snippet":"controllerFor('${1:routePath}')","description":"Get controller from route path","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"controllerFor","type":"property"},
      {"name":"modelFor","snippet":"modelFor('${1:routePath}')","description":"Get model from route path","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"modelFor","type":"property"},
      {"name":"send","snippet":"send('${1:actionName}','$${2:actionArgs}')","description":"Send actions from route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"send","type":"property"},
      {"name":"set","snippet":"set('${1:propertyName}')","description":"Set property in route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"set","type":"property"},
      {"name":"setProperties","snippet":"setProperties({${1:object of proerties set}})","description":"Set multiple properties in route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"setProperties","type":"property"},
      {"name":"incrementProperty","snippet":"incrementProperty(${1:property Name}, $${2: value})","description":"Increment property","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"incrementProperty","type":"property"},
      {"name":"decrementProperty","snippet":"decrementProperty(${1:property Name}, $${2: value})","description":"Decrement property","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"decrementProperty","type":"property"},
      {"name":"render","snippet":"render('${1:name}', {outlet: '${2:outletName}' \n})","description":"Render templete in outlet","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"render","type":"property"}
    ],
    "Ember":[
      {"name":"computed","text":"computed","description":"A computed namespace ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Computed","type":"property"},
      {"name":"inject","text":"inject","description":"A inject namespace","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Inject","type":"property"},
      {"name":"run","text":"run","description":"A run namespace","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Run","type":"property"},
      {"name":"on","snippet":"on('${1:event}', function(){ ${2:  // code :)}\n})","description":"A binding event","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"on","type":"function"}
    ],
    "computed":[
      {"name":"alias","snippet":"alias('${1:dependentKey}')","description":"Creates a new property that is an alias for another property\non an object Calls to get or set this property behave as\nthough they were called on the original property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_alias","leftLabel":"alias","type":"property"},
      {"name":"and","snippet":"and('${1:dependentKey}')","description":"A computed property that performs a logical and on the\noriginal values for the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_and","leftLabel":"and","type":"property"},
      {"name":"bool","snippet":"bool('${1:dependentKey}')","description":"A computed property that converts the provided dependent property\ninto a boolean value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_bool","leftLabel":"bool","type":"property"},
      {"name":"collect","snippet":"collect('${1:dependentKey}')","description":"A computed property that returns the array of values\nfor the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_collect","leftLabel":"collect","type":"property"},
      {"name":"deprecatingAlias","snippet":"deprecatingAlias('${1:dependentKey}')","description":"Creates a new property that is an alias for another property\non an object Calls to get or set this property behave as\nthough they were called on the original property but also\nprint a deprecation warning","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_deprecatingAlias","leftLabel":"deprecatingAlias","type":"property"},
      {"name":"empty","snippet":"empty('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is null an empty string empty array or empty function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_empty","leftLabel":"empty","type":"property"},
      {"name":"equal","snippet":"equal('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis equal to the given value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_equal","leftLabel":"equal","type":"property"},
      {"name":"filter","snippet":"filter('${1:dependentKey}',function(){ \n ${2: code} \n}))","description":"Filters the array by the callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_filter","leftLabel":"filter","type":"property"},
      {"name":"filterBy","snippet":"filterBy('${1:dependentKey}',${2: propertyKey},${3: value})","description":"Filters the array by the property and value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_filterBy","leftLabel":"filterBy","type":"property"},
      {"name":"gt","snippet":"gt('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis greater than the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_gt","leftLabel":"gt","type":"property"},
      {"name":"gte","snippet":"gte('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_gte","leftLabel":"gte","type":"property"},
      {"name":"intersect","snippet":"intersect(${1:propertyKey})","description":"A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_intersect","leftLabel":"intersect","type":"property"},
      {"name":"lt","snippet":"lt('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis less than the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_lt","leftLabel":"lt","type":"property"},
      {"name":"lte","snippet":"lte('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis less than or equal to the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_lte","leftLabel":"lte","type":"property"},
      {"name":"map","snippet":"map('${1:dependentKey}',function(){ \n ${2: code} \n}))","description":"Returns an array mapped via the callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_map","leftLabel":"map","type":"property"},
      {"name":"mapBy","snippet":"mapBy('${1:dependentKey}',${2: propertyKey})","description":"Returns an array mapped to the specified key","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_mapBy","leftLabel":"mapBy","type":"property"},
      {"name":"match","snippet":"match('${1:dependentKey}',${2: regexp})","description":"A computed property which matches the original value for the\ndependent property against a given RegExp returning true\nif the value matches the RegExp and false if it does not","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_match","leftLabel":"match","type":"property"},
      {"name":"max","snippet":"max('${1:dependentKey}')","description":"A computed property that calculates the maximum value in the\ndependent array This will return Infinity when the dependent\narray is empty","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_max","leftLabel":"max","type":"property"},
      {"name":"min","snippet":"min('${1:dependentKey}')","description":"A computed property that calculates the minimum value in the\ndependent array This will return Infinity when the dependent\narray is empty","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_min","leftLabel":"min","type":"property"},
      {"name":"none","snippet":"none('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is null or undefined This avoids errors from JSLint complaining\nabout use of  which can be technically confusing","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_none","leftLabel":"none","type":"property"},
      {"name":"not","snippet":"not('${1:dependentKey}')","description":"A computed property that returns the inverse boolean value\nof the original value for the dependent property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_not","leftLabel":"not","type":"property"},
      {"name":"notEmpty","snippet":"notEmpty('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is NOT null an empty string empty array or empty function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty","leftLabel":"notEmpty","type":"property"},
      {"name":"oneWay","snippet":"oneWay('${1:dependentKey}')","description":"Where computedalias aliases get and set and allows for bidirectional\ndata flow computedoneWay only provides an aliased get The set will\nnot mutate the upstream property rather causes the current property to\nbecome the value set This causes the downstream property to permanently\ndiverge from the upstream property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_oneWay","leftLabel":"oneWay","type":"property"},
      {"name":"or","snippet":"or('${1:dependentKey}')","description":"A computed property which performs a logical or on the\noriginal values for the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_or","leftLabel":"or","type":"property"},
      {"name":"readOnly","snippet":"readOnly('${1:dependentKey}')","description":"Where computedoneWay provides oneWay bindings computedreadOnly provides\na readOnly one way binding Very often when using computedoneWay one does\nnot also want changes to propagate back up as they will replace the value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_readOnly","leftLabel":"readOnly","type":"property"},
      {"name":"reads","snippet":"reads('${1:dependentKey}')","description":"This is a more semantically meaningful alias of computedoneWay\nwhose name is somewhat ambiguous as to which direction the data flows","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_reads","leftLabel":"reads","type":"property"},
      {"name":"setDiff","snippet":"setDiff(${1:setAProperty},${2: setBProperty})","description":"A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_setDiff","leftLabel":"setDiff","type":"property"},
      {"name":"sort","snippet":"sort(${1:itemsKey},${2: sortDefinition})","description":"A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_sort","leftLabel":"sort","type":"property"},
      {"name":"sum","snippet":"sum('${1:dependentKey}')","description":"A computed property that returns the sum of the values\nin the dependent array","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_sum","leftLabel":"sum","type":"property"},
      {"name":"union","snippet":"union(${1:propertyKey})","description":"Alias for Embercomputeduniq","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_union","leftLabel":"union","type":"property"},
      {"name":"uniq","snippet":"uniq(${1:propertyKey})","description":"A computed property which returns a new array with all the unique\nelements from one or more dependent arrays","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_uniq","leftLabel":"uniq","type":"property"}
    ],
    "inject": [
      {"name":"service","snippet":"service('${1:serviceName}')","description":"A service hook","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Service","type":"property"}
    ],
    "run": [
      {"name":"schedule","snippet":"schedule('${1:event}', function(){   $${2:  //Code :)}})","description":"A service hook","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Service","type":"property"}
    ]
  },
  "controller":{
    "this":[
      {"name":"get","snippet":"get('${1:propertyName}')","description":"Get property ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"get","type":"property"},
      {"name":"getProperties","snippet":"getProperties('${1:propertyName}', '$${2:propertyName}')","description":"Get multiple properties ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"getProperties","type":"property"},
      {"name":"transitionToRoute","snippet":"transitionToRoute('${1:routePath}')","description":"Transition to route ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"transitionTo","type":"property"},
      {"name":"send","snippet":"send('${1:actionName}','$${2:actionArgs}')","description":"Send actions from route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"send","type":"property"},
      {"name":"set","snippet":"set('${1:propertyName}')","description":"Set property in route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"set","type":"property"},
      {"name":"setProperties","snippet":"setProperties({${1:object of proerties set}})","description":"Set multiple properties in route","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"setProperties","type":"property"},
      {"name":"incrementProperty","snippet":"incrementProperty(${1:property Name}, $${2: value})","description":"Increment property","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"incrementProperty","type":"property"},
      {"name":"decrementProperty","snippet":"decrementProperty(${1:property Name}, $${2: value})","description":"Decrement property","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"decrementProperty","type":"property"}
    ],
    "Ember":[
      {"name":"computed","text":"computed","description":"A computed namespace ","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Computed","type":"property"},
      {"name":"inject","text":"inject","description":"A inject namespace","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Inject","type":"property"},
      {"name":"run","text":"run","description":"A run namespace","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Run","type":"property"}
    ],
    "computed":[
      {"name":"alias","snippet":"alias('${1:dependentKey}')","description":"Creates a new property that is an alias for another property\non an object Calls to get or set this property behave as\nthough they were called on the original property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_alias","leftLabel":"alias","type":"property"},
      {"name":"and","snippet":"and('${1:dependentKey}')","description":"A computed property that performs a logical and on the\noriginal values for the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_and","leftLabel":"and","type":"property"},
      {"name":"bool","snippet":"bool('${1:dependentKey}')","description":"A computed property that converts the provided dependent property\ninto a boolean value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_bool","leftLabel":"bool","type":"property"},
      {"name":"collect","snippet":"collect('${1:dependentKey}')","description":"A computed property that returns the array of values\nfor the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_collect","leftLabel":"collect","type":"property"},
      {"name":"deprecatingAlias","snippet":"deprecatingAlias('${1:dependentKey}')","description":"Creates a new property that is an alias for another property\non an object Calls to get or set this property behave as\nthough they were called on the original property but also\nprint a deprecation warning","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_deprecatingAlias","leftLabel":"deprecatingAlias","type":"property"},
      {"name":"empty","snippet":"empty('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is null an empty string empty array or empty function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_empty","leftLabel":"empty","type":"property"},
      {"name":"equal","snippet":"equal('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis equal to the given value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_equal","leftLabel":"equal","type":"property"},
      {"name":"filter","snippet":"filter('${1:dependentKey}',function(){ \n ${2: code} \n}))","description":"Filters the array by the callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_filter","leftLabel":"filter","type":"property"},
      {"name":"filterBy","snippet":"filterBy('${1:dependentKey}',${2: propertyKey},${3: value})","description":"Filters the array by the property and value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_filterBy","leftLabel":"filterBy","type":"property"},
      {"name":"gt","snippet":"gt('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis greater than the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_gt","leftLabel":"gt","type":"property"},
      {"name":"gte","snippet":"gte('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_gte","leftLabel":"gte","type":"property"},
      {"name":"intersect","snippet":"intersect(${1:propertyKey})","description":"A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_intersect","leftLabel":"intersect","type":"property"},
      {"name":"lt","snippet":"lt('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis less than the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_lt","leftLabel":"lt","type":"property"},
      {"name":"lte","snippet":"lte('${1:dependentKey}',${2: value})","description":"A computed property that returns true if the provided dependent property\nis less than or equal to the provided value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_lte","leftLabel":"lte","type":"property"},
      {"name":"map","snippet":"map('${1:dependentKey}',function(){ \n ${2: code} \n}))","description":"Returns an array mapped via the callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_map","leftLabel":"map","type":"property"},
      {"name":"mapBy","snippet":"mapBy('${1:dependentKey}',${2: propertyKey})","description":"Returns an array mapped to the specified key","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_mapBy","leftLabel":"mapBy","type":"property"},
      {"name":"match","snippet":"match('${1:dependentKey}',${2: regexp})","description":"A computed property which matches the original value for the\ndependent property against a given RegExp returning true\nif the value matches the RegExp and false if it does not","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_match","leftLabel":"match","type":"property"},
      {"name":"max","snippet":"max('${1:dependentKey}')","description":"A computed property that calculates the maximum value in the\ndependent array This will return Infinity when the dependent\narray is empty","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_max","leftLabel":"max","type":"property"},
      {"name":"min","snippet":"min('${1:dependentKey}')","description":"A computed property that calculates the minimum value in the\ndependent array This will return Infinity when the dependent\narray is empty","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_min","leftLabel":"min","type":"property"},
      {"name":"none","snippet":"none('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is null or undefined This avoids errors from JSLint complaining\nabout use of  which can be technically confusing","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_none","leftLabel":"none","type":"property"},
      {"name":"not","snippet":"not('${1:dependentKey}')","description":"A computed property that returns the inverse boolean value\nof the original value for the dependent property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_not","leftLabel":"not","type":"property"},
      {"name":"notEmpty","snippet":"notEmpty('${1:dependentKey}')","description":"A computed property that returns true if the value of the dependent\nproperty is NOT null an empty string empty array or empty function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty","leftLabel":"notEmpty","type":"property"},
      {"name":"oneWay","snippet":"oneWay('${1:dependentKey}')","description":"Where computedalias aliases get and set and allows for bidirectional\ndata flow computedoneWay only provides an aliased get The set will\nnot mutate the upstream property rather causes the current property to\nbecome the value set This causes the downstream property to permanently\ndiverge from the upstream property","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_oneWay","leftLabel":"oneWay","type":"property"},
      {"name":"or","snippet":"or('${1:dependentKey}')","description":"A computed property which performs a logical or on the\noriginal values for the provided dependent properties","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_or","leftLabel":"or","type":"property"},
      {"name":"readOnly","snippet":"readOnly('${1:dependentKey}')","description":"Where computedoneWay provides oneWay bindings computedreadOnly provides\na readOnly one way binding Very often when using computedoneWay one does\nnot also want changes to propagate back up as they will replace the value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_readOnly","leftLabel":"readOnly","type":"property"},
      {"name":"reads","snippet":"reads('${1:dependentKey}')","description":"This is a more semantically meaningful alias of computedoneWay\nwhose name is somewhat ambiguous as to which direction the data flows","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_reads","leftLabel":"reads","type":"property"},
      {"name":"setDiff","snippet":"setDiff(${1:setAProperty},${2: setBProperty})","description":"A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_setDiff","leftLabel":"setDiff","type":"property"},
      {"name":"sort","snippet":"sort(${1:itemsKey},${2: sortDefinition})","description":"A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_sort","leftLabel":"sort","type":"property"},
      {"name":"sum","snippet":"sum('${1:dependentKey}')","description":"A computed property that returns the sum of the values\nin the dependent array","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_sum","leftLabel":"sum","type":"property"},
      {"name":"union","snippet":"union(${1:propertyKey})","description":"Alias for Embercomputeduniq","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_union","leftLabel":"union","type":"property"},
      {"name":"uniq","snippet":"uniq(${1:propertyKey})","description":"A computed property which returns a new array with all the unique\nelements from one or more dependent arrays","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.computed.html#method_uniq","leftLabel":"uniq","type":"property"}
    ],
    "inject": [
      {"name":"controller","snippet":"controller('${1:controllerName}')","description":"A controller hook","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Controller","type":"property"},
      {"name":"service","snippet":"service('${1:serviceName}')","description":"A service hook","descriptionMoreURL":"https://atom.io/docs/api/latest/AtomEnvironment#instance-clipboard","leftLabel":"Service","type":"property"}
    ]
  },
  "functions":[
    {"name":"any","snippet":"any(function(object){\n  ${1:code } \n})","description":"Returns true if the passed function returns true for any item in the\nenumeration This corresponds with the some method in JavaScript 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_any","leftLabel":"any","type":"property","return":"boolean"},
    {"name":"compact","snippet":"compact(${1:})","description":"Returns a copy of the array with all null and undefined elements removed","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_compact","leftLabel":"compact","type":"property","return":"array"},
    {"name":"contains","snippet":"contains(${1:obj})","description":"Returns true if the passed object can be found in the receiver The\ndefault version will iterate through the enumerable until the object\nis found You may want to override this with a more efficient version","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_contains","leftLabel":"contains","type":"property","return":"boolean"},
    {"name":"every","snippet":"every(function(object){\n  ${1:code } \n})","description":"Returns true if the passed function returns true for every item in the\nenumeration This corresponds with the every method in JavaScript 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_every","leftLabel":"every","type":"property","return":"boolean"},
    {"name":"filter","snippet":"filter(function(object){\n  ${1:code } \n})","description":"Returns an array with all of the items in the enumeration that the passed\nfunction returns true for This method corresponds to filter defined in\nJavaScript 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_filter","leftLabel":"filter","type":"property","return":"array"},
    {"name":"filterBy","snippet":"filterBy(${1:key},${2: value})","description":"Returns an array with just the items with the matched property You\ncan pass an optional second argument with the target value Otherwise\nthis will match any property that evaluates to true","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_filterBy","leftLabel":"filterBy","type":"property","return":"array"},
    {"name":"find","snippet":"find(function(object){\n  ${1:code } \n})","description":"Returns the first item in the array for which the callback returns true\nThis method works similar to the filter method defined in JavaScript 16\nexcept that it will stop working on the array once a match is found","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_find","leftLabel":"find","type":"property","return":"object"},
    {"name":"findBy","snippet":"findBy(${1:key},${2: value})","description":"Returns the first item with a property matching the passed value You\ncan pass an optional second argument with the target value Otherwise\nthis will match any property that evaluates to true","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_findBy","leftLabel":"findBy","type":"property","return":"object"},
    {"name":"forEach","snippet":"forEach(function(object){\n  ${1:code } \n})","description":"Iterates through the enumerable calling the passed function on each\nitem This method corresponds to the forEach method defined in\nJavaScript 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_forEach","leftLabel":"forEach","type":"property","return":"object"},
    {"name":"getEach","snippet":"getEach(${1:key})","description":"Alias for mapBy","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_getEach","leftLabel":"getEach","type":"property","return":"array"},
    {"name":"invoke","snippet":"invoke(${1:methodName},${2: args})","description":"Invokes the named method on every object in the receiver that\nimplements it This method corresponds to the implementation in\nPrototype 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_invoke","leftLabel":"invoke","type":"property","return":"array"},
    {"name":"isAny","snippet":"isAny(${1:key},${2: value})","description":"Returns true if the passed property resolves to the value of the second\nargument for any item in the enumerable This method is often simplerfaster\nthan using a callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_isAny","leftLabel":"isAny","type":"property","return":"boolean"},
    {"name":"isEvery","snippet":"isEvery(${1:key},${2: value})","description":"Returns true if the passed property resolves to the value of the second\nargument for all items in the enumerable This method is often simplerfaster\nthan using a callback","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_isEvery","leftLabel":"isEvery","type":"property","return":"boolean"},
    {"name":"map","snippet":"map(function(object){\n  ${1:code } \n})","description":"Maps all of the items in the enumeration to another value returning\na new array This method corresponds to map defined in JavaScript 16","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_map","leftLabel":"map","type":"property","return":"array"},
    {"name":"mapBy","snippet":"mapBy(${1:key})","description":"Similar to map this specialized function returns the value of the named\nproperty on all items in the enumeration","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_mapBy","leftLabel":"mapBy","type":"property","return":"array"},
    {"name":"reduce","snippet":"reduce(${1:callback},${2: initialValue},${3: reducerProperty})","description":"This will combine the values of the enumerator into a single value It\nis a useful way to collect a summary value from an enumeration This\ncorresponds to the reduce method defined in JavaScript 18","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_reduce","leftLabel":"reduce","type":"property","return":"object"},
    {"name":"reject","snippet":"reject(function(object){\n  ${1:code } \n})","description":"Returns an array with all of the items in the enumeration where the passed\nfunction returns false This method is the inverse of filter","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_reject","leftLabel":"reject","type":"property","return":"array"},
    {"name":"rejectBy","snippet":"rejectBy(${1:key},${2: value})","description":"Returns an array with the items that do not have truthy values for\nkey  You can pass an optional second argument with the target value  Otherwise\nthis will match any property that evaluates to false","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_rejectBy","leftLabel":"rejectBy","type":"property","return":"array"},
    {"name":"setEach","snippet":"setEach(${1:key},${2: value})","description":"Sets the value on the named property for each member This is more\nefficient than using other methods defined on this helper If the object\nimplements EmberObservable the value will be changed to set otherwise\nit will be set directly null objects are skipped","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_setEach","leftLabel":"setEach","type":"property","return":"object"},
    {"name":"sortBy","snippet":"sortBy(${1:property})","description":"Converts the enumerable into an array and sorts by the keys\nspecified in the argument","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_sortBy","leftLabel":"sortBy","type":"property","return":"array"},
    {"name":"toArray","snippet":"toArray(${1:})","description":"Simply converts the enumerable into a genuine array The order is not\nguaranteed Corresponds to the method implemented by Prototype","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_toArray","leftLabel":"toArray","type":"property","return":"array"},
    {"name":"uniq","snippet":"uniq()","description":"Returns a new enumerable that contains only unique values The default\nimplementation returns an array regardless of the receiver type","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_uniq","leftLabel":"uniq","type":"property","return":"ember.enumerable"},
    {"name":"indexOf","snippet":"indexOf(${1:value})","description":"Returns the index of the given object's first occurrence. If no startAt argument is given, the starting location to search is 0. If it's negative, will count backward from the end of the array. Returns -1 if no match is found.","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Array.html#method_indexOf","leftLabel":"indexOf","type":"function","return":"number"},
    {"name":"slice","snippet":"slice(${1:start},${2:stop})","description":"Returns a new array that is a slice of the receiver. This implementation uses the observable array methods to retrieve the objects for the new slice.","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Array.html#method_slice","leftLabel":"slice","type":"function","return":"array"},
    {"name":"objectsAt","snippet":"objectsAt([${1:arrayOfIndex}])","description":"This returns the objects at the specified indexes.","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Array.html#method_objectsAt","leftLabel":"objectsAt","type":"function","return":"array"},
    {"name":"objectAt","snippet":"objectAt(${1:Index})","description":"Returns the object at the given index. If the given index is negative or is greater or equal than the array length, returns undefined.","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Array.html#method_objectAt","leftLabel":"objectAt","type":"function","return":"*"},
    {"name":"without","snippet":"without(${1:value})","description":"Returns a new enumerable that excludes the passed value The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value","descriptionMoreURL":"http://emberjs.com/api/classes/Ember.Enumerable.html#method_without","leftLabel":"without","type":"property","return":"ember.enumerable"}
  ]
}
